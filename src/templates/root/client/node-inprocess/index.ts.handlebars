---
to: "{{configuration.embraceSQLRoot}}/client/node-inprocess/index.ts"
---
/* eslint-disable @typescript-eslint/camelcase */

import * as types from "../../context";

/**
* Create an EmbraceSQL cient for use embedded in process. This takes an execution map, 
* which directly executes a SQLModule, by name, with a function, not an HTTP POST.
* 
* This function can be any thing that takes SQL Parameters -- name value pairs in 
* an object, and returns a result set -- an array of objects that are name value pairs
* that are the resulting rows.
*
* To use this client, you need to create and pass in an execution map, which provides
* a way to execute a SQLModule by its unique `contextName`.
*/
// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
export const EmbraceSQL = ({directQueryExecutors} : types.SQLModuleDirectExecutors) => {
  const handlerWrappedExecutors = types.SQLModuleExecutorsWithHandlers({directQueryExecutors});
  const DatabaseMap = {
    databases: {
    {{#eachInMap databases}}
      {{@key}}: {
      {{#treeAMap value.SQLModules database=value}}
        {{#each value}}
        {{> moduleTree this database=@database }}
        {{/each}}
      {{/treeAMap}}
      },
    {{/eachInMap}}
    }
  };
  return DatabaseMap;
};

{{#*inline "moduleTree"}}
{{name}}: {
  {{#if value}}
  sql: async (parameters: types.{{value.contextName}}Parameters) : Promise<types.{{value.contextName}}Row[]> => {
    return (await handlerWrappedExecutors.{{value.contextName}}({parameters, results: []})).results;
  }
  {{/if}}
  {{#each children}}
    {{> moduleTree this database=database}}
  {{/each}}
},
{{/inline}}