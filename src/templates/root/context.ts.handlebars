---
to: "{{configuration.embraceSQLRoot}}/context.ts"
---
/* eslint-disable @typescript-eslint/camelcase */

{{> shared-context.ts}}

// Generation starts here

// All named databases
export type AvailableDatabaseNames = 
  {{#eachInMap databases}}
  "{{@key}}" {{#if @last}};{{else}}|{{/if}}
  {{/eachInMap}}
export type AvailableDatabases = Databases<AvailableDatabaseNames>;

// each different API endpoint gets a context type with parameters and results
{{#eachInMap databases}}
{{#eachInMap value.SQLModules}}
{{> resultsetMetadata value}}
{{#if value.namedParameters.length }}
{{> parametersMetadata value}}
export type {{value.contextName}}Context = 
  Context<AvailableDatabaseNames> & { 
    results: {{value.contextName}}Results, 
    parameters: {{value.contextName}}Parameters
  };
{{else}}
export type {{value.contextName}}Context = 
  Context<AvailableDatabaseNames> & { results: {{value.contextName}}Results};
{{/if}}
{{/eachInMap}}
{{/eachInMap}}


{{#*inline "resultsetMetadata"}}
export type {{contextName}}Results = Array<
{
  {{#each resultsetMetadata}}
    {{name}}: {{type}}
  {{/each}}
}
>;
{{/inline}}

{{#*inline "parametersMetadata"}}
export type {{contextName}}Parameters = 
{
  {{#each namedParameters}}
    {{name}}: {{type}}
  {{/each}}
};

{{/inline}}