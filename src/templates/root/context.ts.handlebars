---
to: "{{configuration.embraceSQLRoot}}/context.ts"
---
/* eslint-disable @typescript-eslint/camelcase */

{{> shared-context.ts}}

// Generation starts here

// All named databases
export type AvailableDatabaseNames = 
  {{#eachInMap databases}}
  "{{@key}}" {{#if @last}};{{else}}|{{/if}}
  {{/eachInMap}}

// each SQLModule  gets a context type with parameters (if present) and results
{{#eachInMap databases}}
{{#eachInMap value.SQLModules}}
{{> resultsetMetadata value}}
{{> parametersMetadata value}}
export type {{value.contextName}}Context = 
  Context & { 
    results: {{value.contextName}}Results, 
    parameters: {{value.contextName}}Parameters
  };
export type {{value.contextName}}Handler = 
  (context: {{value.contextName}}Context) => Promise<{{value.contextName}}Context>;
// generated imports for handlers
import {before as {{value.contextName}}BeforeHandler} from "./{{value.restPath}}.sql.before";
{{/eachInMap}}
{{/eachInMap}}


{{#*inline "resultsetMetadata"}}
export type {{contextName}}Results = Array<
SQLRow & {
  {{#each resultsetMetadata}}
    {{name}}: {{type}}
  {{/each}}
}
>;
{{/inline}}

{{#*inline "parametersMetadata"}}
export type {{contextName}}Parameters = 
SQLParameters & {
  {{#each namedParameters}}
    {{name}}: {{type}}
  {{/each}}
};
{{/inline}}


// all database all modules direct handlers
// each SQL Module has a direct execution decorator to attach handlers
export const SQLModuleExecutorsWithHandlers = ({directQueryExecutors}: SQLModuleDirectExecutors) => {
{{#eachInMap databases}}
  return {
    // database{{@key}}
    {{#eachInMap value.SQLModules}}
      {{value.contextName}}:  async (context: {{value.contextName}}Context) : Promise<{{value.contextName}}Context> => {
        await {{value.contextName}}BeforeHandler(context);
        const executor = directQueryExecutors["{{value.contextName}}"];
        const results = executor ? await executor(context.parameters) : [];
        context.results = results as unknown as {{value.contextName}}Results;
        return context;
      },
    {{/eachInMap}}
  }
{{/eachInMap}}
};

// each folder has a direct execution decorator to attach handlers